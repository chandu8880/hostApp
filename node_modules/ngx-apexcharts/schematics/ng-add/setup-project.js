"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = default_1;
const schematics_1 = require("@angular-devkit/schematics");
const workspace_1 = require("@schematics/angular/utility/workspace");
const workspace_models_1 = require("@schematics/angular/utility/workspace-models");
const rules_1 = require("@schematics/angular/utility/standalone/rules");
const utils_1 = require("../utils");
function default_1(options) {
    return (host, context) => __awaiter(this, void 0, void 0, function* () {
        const workspace = yield (0, workspace_1.getWorkspace)(host);
        const project = (0, utils_1.getProjectFromWorkspace)(workspace, options.project);
        if (project.extensions['projectType'] !== workspace_models_1.ProjectType.Application) {
            context.logger.warn(`project '${options.project}' is not an angular application. it look like angular library`);
            return;
        }
        return (0, schematics_1.chain)([addNgxApexchartsModule(options)]);
    });
}
function addNgxApexchartsModule(options) {
    // eslint-disable-next-line @typescript-eslint/no-unused-vars
    return (_host, _context) => __awaiter(this, void 0, void 0, function* () {
        const ngxApexchartModuleoduleName = 'NgxApexchartsModule';
        const libraryName = 'ngx-apexcharts';
        return (0, rules_1.addRootImport)(options.project, ({ code, external }) => code `${external(ngxApexchartModuleoduleName, libraryName)}`);
    });
}
